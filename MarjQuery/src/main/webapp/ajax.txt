jQuery Ajax함수

Ajax(Asynchronous Javascript and XML)는 
웹페이지가 서버와 비동기 통신을 하는 기술들의 집합체이다.(동기통신도 가능)

웹브라우저는 대단히 정적인 시스템이었다. 
내용이 바뀌면 페이지 새로고침을 해서 내용을 새롭게 변경해야 했다. 
이것은 웹이 전자 문서를 염두에 두고 고안된 시스템이기 때문에 당연하게 생각 되었다. 

그러다 Ajax 개념이 도입되면서 모든 것이 바뀌었다. 
Ajax는 웹브라우저와 웹서버가 내부적으로 데이터 통신을 하게 된다. 
그리고 변경된 결과를 웹페이지에 프로그래밍적으로 반영함으로써 웹페이지의 로딩 없이 
서비스를 사용할 수 있게 한다. 

Ajax를 사용하면 웹 페이지나 애플리케이션에서 정말로 필요한 데이터, 
서버에서 받아와야 하는 데이터만 요청하기 때문에 데이터 이용량은 줄어들고, 
작은 부분만 업데이트하고, 페이지 새로고침을 기다리는 시간도 줄어들었다. 


① 기본함수

$.ajax({옵션속성:값}); // jQuery.ajax();

options 에 대한 상세 내용 

1. url: 요청 URL(String) 

2. type: 사용할 HTTP 메서드, 일반적으로 POST 나 GET 을 사용(String) 

3. data: 요청에 전달되는 프로퍼티를 가진 객체(Object) 

4. dataType: 응답의 결과로 반환되는 데이터의 종류를 식별하는 키워드. 
필요시 이 값을 통해 데이터를  콜백 함수로 전달하기 전에  어떤 종류의 후처리가 발생할지 결정한다          
-xml : 응답 텍스트는 XML 문서로 파싱되며, 콜백에 결과로 생성된 XML DOM 을 전달  
-html : 응답 텍스트는 처리 과정 없이 콜백 함수로 전달. 반환된 HTML 코드에 잇는 모든 <script>블록이 평가된다  
-json : 응답 텍스트는 JSON 문자열로 평가되며, 생성된 객체는 콜백에 전달된다.  
-jsonp : 원격 스크립트를 허용한다는 점을 제외하고는 json 과 유사.  
-script : 응답 텍스트는 콜백에 전달. 응답은 모든 콜백의 호출보다 먼저 자바스크립트 구문으로 처리  
-text : 응답 텍스트는 일반 텍스트 

5. timeout: Ajax 요청의 제한 시간을 밀리초 단위로 설정. 제한 시간 안에 요청이 완료되지 않으면 요청을 취소하거나, error 콜백이 정의되어 있다면 호출된다(Number) 

6. global: true 나 false 에 따라 전역 함수를 활성화 하거나 비 활성화 한다. 전역 함수는 엘리먼트에 덧붙일 수 있으며 Ajax 호출 동안 다양한 위치나 조건에서 실행된다(Boolean) 

7. contentType: 요청에 명시되는 콘텐츠 타입. application/x-www-form-urlencoded 가 기본으로 설정(String) 

8. success: 응답이 성공 상태 코드를 반환하면 호출되는 함수. 응답 본문은 이 함수의 첫 번째 매개변수로 전달되며, dataType 프로퍼티에 명시한 형태로 구성. 두번째 매개변수는 상태값을 나타내는 문자열이며, 이 경우에는 항상 success다(Function) 

9. error: 응답이 에러 상태 코드를 반환하면 호출되는 함수. 매개변수가 세 개 전달 되는데, 각각 XHR 인스턴스, 상태값이 항상 'error' 인 메시지 문자열, 선택사항으로 XHR 인스턴스가 반환한 예외 객체이다(Function) 

10. complete: 요청이 완료되면 호출되는 함수. 매개변수 두 개가 전달되는데, 각각 XHR 인스턴스와 success 혹은 error을 나타내는 상태 메시지 문자열이다. success 나 error 콜백을 명시했다면, 이 함수는 해당 콜백이 호출된 후에 실행된다(Function) 

11. beforeSend: 요청이 전송되기에 앞서 먼저 호출되는 함수. 이 함수는 XHR 인스턴스를 전달 받으며, 사용자 정의 헤더를    설정하거나 요청 전에 필요한 연산을 수행하는 데 사용할 수 있다(Function) 

12. async: false 이면 요청이 동기 호출로 전송된다. 기본은 비동기 요청(Boolean) 

13. processData: false로 설정되면, URL 인코딩 된 형태로 처리되어 전달 된 데이터를 금지한다. 기본 값은 데이터가 application/x-www-form-urlencoded 타입의 요청에 사용하는 형태의 URL로 인코딩 된다(Boolean) 

14. ifModified: true 일 때 Last-Modified 헤더를 확인하여 마지막 요청 이후에 응답 콘텐츠가 변경되지 않았다면   요청이 성공한다. 만일 생략하면 헤더를 확인하지 않는다(Boolean)

$.ajax()에 대한 더 자세한 설명은 http://api.jquery.com/jQuery.ajax/ 를 참조

$(document).ready(function(){
    $.ajax({
      type: "POST",
      url: "/someController",
      data: { name: "John", location: "Boston" },
      success:function( html ) {
        $( "#results" ).append( html );
      }
    });
});



$.ajax({
  url: '주소',
  type: 'get 또는 post',
  data: {보낼 데이터},
  dataType: 'json, xml, script, text 또는 html',
  })
  .done( function(response) {
    // 성공 시 동작
  })
  .fail(function( jqXHR, textStatus, error ) {
  alert( "Request failed: " + textStatus );
	});
  .always(function(response) {
    // 성공하든 실패하든 항상 할 동작
  });


var request = $.ajax({
  url: "script.php",
  method: "POST",
  data: { id : menuId },
  dataType: "html"
});
 
request.done(function( msg ) {
  $( "#log" ).html( msg );
});
 
request.fail(function( jqXHR, textStatus ) {
  alert( "Request failed: " + textStatus );
});


② 간편형 함수

$.get(); - get방식으로 Ajax를 실행
$.post(); - post방식으로 Ajax를 실행
$.getJSON(); - get방식 실행후 JSON데이터를 가져온다  
$.getScript(); - get방식 실행후 Script데이터를 가져온다
$(select).load(); - Ajax실행 후 선택자에 문자열을 추가한다 

get이나 post만을 전문적으로 하는 메소드도 있습니다. 데이터와 데이터타입은 입력하지 않아도 됩니다.

$.get('주소', '데이터', function(res) {
  // 성공 시 동작
}, '데이터타입');
$.post('주소', '데이터', function(res) {
  // 성공 시 동작
}, '데이터타입');

스크립트와 JSON만을 전문적으로 가져오는 메소드도 있습니다.

$.getScript('스크립트 주소', function(script) {
  // 성공 시 동작
});
$.getJSON('JSON 주소', { 데이터 }, function(data) {
  // 성공 시 동작
});


